# Generated by Django 5.1.4 on 2025-01-04 14:21

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import job.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BatchJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('title', models.CharField(default='New BatchJob', help_text='배치 작업의 제목을 입력하세요.', max_length=255,
                                           verbose_name='Title')),
                ('description', models.TextField(blank=True, help_text='배치 작업에 대한 설명을 입력하세요. (선택 사항)', null=True,
                                                 verbose_name='Description')),
                ('file', models.FileField(blank=True, null=True, upload_to=job.models.get_upload_path, validators=[
                    django.core.validators.FileExtensionValidator(allowed_extensions=['CSV', 'PDF'])],
                                          verbose_name='Uploaded File')),
                ('file_type',
                 models.CharField(blank=True, choices=[('CSV', 'CSV'), ('PDF', 'PDF')], max_length=10, null=True,
                                  verbose_name='File Type')),
                ('prompt', models.TextField(blank=True, null=True, verbose_name='Default Prompt for BatchJob')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batch_jobs',
                                           to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Batch Job',
                'verbose_name_plural': 'Batch Jobs',
                'db_table': 'batch_job',
            },
        ),
        migrations.CreateModel(
            name='TaskUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('unit_index', models.IntegerField(verbose_name='Unit Index')),
                ('text_data', models.TextField(blank=True, null=True, verbose_name='Text Data')),
                ('file_data', models.FileField(blank=True, null=True, upload_to=job.models.get_taskunit_path,
                                               verbose_name='File Data')),
                ('status', models.CharField(
                    choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'),
                             ('FAILED', 'Failed')], default='PENDING', max_length=20, verbose_name='Status')),
                ('batch_job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_units',
                                                to='job.batchjob', verbose_name='Batch Job')),
            ],
            options={
                'verbose_name': 'Task Unit',
                'verbose_name_plural': 'Task Units',
                'db_table': 'task_unit',
            },
        ),
        migrations.CreateModel(
            name='TaskUnitResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('request_data', models.TextField(blank=True, null=True, verbose_name='Prompt Data per TaskUnit')),
                ('response_data', models.JSONField(blank=True, help_text='ChatGPT로부터 받은 응답 데이터', null=True,
                                                   verbose_name='Response Data')),
                ('status', models.CharField(
                    choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'),
                             ('FAILED', 'Failed')], default='PENDING', max_length=20, verbose_name='Status')),
                ('error_code', models.CharField(blank=True, help_text='요청 실패 시 발생한 오류 코드', max_length=50, null=True,
                                                verbose_name='Error Code')),
                ('error_message',
                 models.TextField(blank=True, help_text='요청 실패 시 발생한 오류 메시지', null=True, verbose_name='Error Message')),
                ('processing_time',
                 models.FloatField(blank=True, help_text='요청 처리 시간 (초 단위)', null=True, verbose_name='Processing Time')),
                ('task_unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses',
                                                to='job.taskunit', verbose_name='Task Unit')),
            ],
            options={
                'verbose_name': 'Task Unit Response',
                'verbose_name_plural': 'Task Unit Responses',
                'db_table': 'task_unit_response',
                'ordering': ['task_unit', 'created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='taskunit',
            index=models.Index(fields=['batch_job'], name='task_unit_batch_j_461a93_idx'),
        ),
        migrations.AddIndex(
            model_name='taskunit',
            index=models.Index(fields=['status'], name='task_unit_status_a8fc43_idx'),
        ),
        migrations.AddConstraint(
            model_name='taskunit',
            constraint=models.UniqueConstraint(fields=('batch_job', 'unit_index'), name='unique_task_unit_per_batch'),
        ),
        migrations.AddIndex(
            model_name='taskunitresponse',
            index=models.Index(fields=['task_unit'], name='task_unit_r_task_un_e93c57_idx'),
        ),
        migrations.AddIndex(
            model_name='taskunitresponse',
            index=models.Index(fields=['status'], name='task_unit_r_status_1616a7_idx'),
        ),
    ]
